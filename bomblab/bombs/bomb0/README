Phase 1:
    x /s 0x3150
   
Phase 2:
    consists 6 numbers
    1st number:
        stored at *rsp
			cmp DWORD PTR [rsp], 0x0
    2nd number:
		stored at *(rsp + 4)
			cmp DWORD PTR [rsp + 0x4], 0x1
    rest numbers:
		stored at *(rsp + 8), *(rsp + 12), *(rsp + 16), *(rsp + 20)
			rbx = rsp
			rbp = rsp + 0x10
			while (rbx != rbp) {
			    eax = *(rbx + 0x4) = 1
			    eax += *rbx = 1
			    cmp DWORD PTR [rbx + 0x8], eax
			    rbp += 0x4
			}

Phase 3:
    consists 2 numbers, where 1st number <= 7
    thus only needs to try out 0 -- 7 to arrive at the answer

Phase 4:
    consists 2 numbers
    2nd number:
        stored at *(rsp + 4)
            cmp DWORD PTR [rsp + 0x4], 0x3
    1st number:
        stored at *rsp and <= 0xe
            edx = 0xe, esi = 0, edi = *rsp
            call func4           // final eax = 3
                eax = ecx = edx - esi
                ecx = esi + ((ecx >> 31) + eax) >> 1 (equals 7 initially, then 11, 13, 12)
                if (ecx > edi) { // (1) ends here when ecx = 13
                    edx = ecx - 1
                    call func4
                    eax *= 2     // (3) eax = 0 * 2 = 0
                } else if (ecx < edi) { // (0.1, 0.2) jumps here when eax = 7 and 13
                    esi = rcx + 1
                    call func4
                    eax = 2 * rax + 1 // (4) eax = 0 + 1 = 1 (5) 1 * 2 + 1 = 3
                } else return 0; // (2) eax = 0 when ecx = 12, which is the final number
                
Phase 5:
    consists 2 numbers
    1st number:
        stored at *rsp
            needs to read 15 numbers from array -- x /15wx 0x31e0
            we know the final number is when eax = 0xf
            also the numbers are fetched via rsi + rax * 4
            so going backwards, 0xf is the 6th number, so we know the previous eax = 6;
            in a similar fasion, the 15th run gives us the initial eax = 5, which is also the 1st number
    2nd number:
        stored at *(rsp + 4)
            this is simply the sum of numbers in previous runs, which is 115

Phase 6:
    consists 6 numbers
    x /20wx 0x5200 && x /4wx 0x5110: gives the info of 6 nodes connected in a singly linked list
            1) value    2) index    3) * next   4) alignment purposes
            0x00000168	0x00000001  0x00005210	0x00000000
            0x000000d6	0x00000002  0x00005220	0x00000000
            0x0000039b	0x00000003  0x00005230  0x00000000
            0x0000031b	0x00000004  0x00005240	0x00000000
            0x000003bb	0x00000005  0x00005110	0x00000000
            0x000003e1	0x00000006  0x00000000	0x00000000
    cmp DWORD PTR [rbx], eax // sort values in decreasing order, while the corresponding indexes are 6 5 3 4 1 2
    
Phase 7
    balanced BST with root at 0x5120
    x /56wx 0x5120
    0x5120 <n1>:	    0x00000024	0x00000000	0x00005140	0x00000000 // (1, 1) -- root
    0x5130 <n1+16>:	    0x00005160	0x00000000	0x00000000	0x00000000
    0x5140 <n21>:	    0x00000008	0x00000000	0x000051c0	0x00000000 // (2, 1)
    0x5150 <n21+16>:	    0x00005180	0x00000000	0x00000000	0x00000000
    0x5160 <n22>:	    0x00000032	0x00000000	0x000051a0	0x00000000 // (2, 2)
    0x5170 <n22+16>:	    0x000051e0	0x00000000	0x00000000	0x00000000
    0x5180 <n32>:	    0x00000016	0x00000000	0x000050b0	0x00000000 // (3, 2)
    0x5190 <n32+16>:	    0x00005070	0x00000000	0x00000000	0x00000000
    0x51a0 <n33>:	    0x0000002d	0x00000000	0x00005010	0x00000000 // (3, 3)
    0x51b0 <n33+16>:	    0x000050d0	0x00000000	0x00000000	0x00000000
    0x51c0 <n31>:	    0x00000006	0x00000000	0x00005030	0x00000000 // (3, 1)
    0x51d0 <n31+16>:	    0x00005090	0x00000000	0x00000000	0x00000000
    0x51e0 <n34>:	    0x0000006b	0x00000000	0x00005050	0x00000000 // (3, 4)
    0x51f0 <n34+16>:	    0x000050f0	0x00000000	0x00000000	0x00000000
    
    visually
                                36
                              /    \
                             8      50
                            / \    /  \
                           6  22  45  107
    reconstruct c code via assembly:
        int res = 1000;
        void func(Node* root, int k) {
            if (!root || root->val == k) return;
            if (k < root->val) {
                func(root->left, k);
                res <<= 1;
            } else {
                res = 0;
                func(root->right, k);
                res = (res << 1) + 1;
            }
        }
    since res = 4 (cmp eax, 0x4), it needs two (res << 1) operations, and because the height is 3, thus the last operation must put 
    res to 0, given this, the steps would be: root->left => root->left => root->right. Therefore, 6 < k < 8, which can only be 7

    

            
                
            
            
            
